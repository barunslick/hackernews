{"version":3,"sources":["components/header/Header.jsx","components/header/index.js","constants/string.js","constants/url.js","services/hackernewsApi.js","hoc/withStoriesContainer.js","utils/mapTimeOfUpload.js","components/comment/commentCard/CommetCard.jsx","components/comment/commentCard/index.js","components/comment/index.js","components/comment/Comment.jsx","components/common/button/Button.jsx","components/common/button/index.js","hoc/withModal.js","components/Stories/fullStoryView/index.js","components/Stories/fullStoryView/FullStoryView.jsx","components/Stories/storyListItem/index.js","components/Stories/storyListItem/StoryListItem.jsx","components/Stories/storiesContainer/StoriesContainer.jsx","components/Stories/storiesContainer/index.js","App.js","constants/routeUrl.js","index.js"],"names":["Header","className","to","FETCH_ERROR","BASE_URL","ITEM","TOP_STORIES","USER_PROFILE","fetchContent","url","a","fetch","then","response","json","data","catch","result","withStoriesContainer","Component","state","isLoading","items","error","this","setState","getStories","string","React","mapTimeOfUpload","date","seconds","Math","floor","Date","getTime","interval","CommentCard","props","by","time","text","href","dangerouslySetInnerHTML","__html","Comment","content","commentId","commentUrl","signal","controller","aborted","AbortController","getComments","abort","kids","map","comment","key","type","Button","onClick","children","withModal","closeModal","history","goBack","FullStoryView","title","storyId","match","params","id","storyUrl","score","StoryListItem","itemId","updateCacheData","cachedData","pathname","listStyle","padding","boxSizing","StoriesContainer","item","source","rowHeight","renderItem","index","style","hasOwnProperty","EnhancedStoriesContainer","App","path","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.af1eeace.chunk.js","sourcesContent":["import React from 'react';\n\nimport { Link } from 'react-router-dom';\n\nimport './header.scss';\n\n/**\n * Returns the header sectiion of webpage.\n *\n * @returns {JSX} Returns the header section.\n */\nfunction Header() {\n  return (\n    <div className=\"Header\">\n      <div className=\"Header__container\">\n        <h1>\n          <Link to='/'> Hackernews</Link>\n        </h1>\n      </div>\n    </div>\n  );\n}\n\nexport default Header;\n","import Header from './Header';\n\nexport default Header;","export const COMMENT_ERROR = 'Can&apos;t fetch comment';\nexport const STORIES_ERROR = 'Can&apos;t get your stories';\nexport const FETCH_ERROR = 'We seem to have problem connecting to Hackernews. Try again later.(Bad URL)';\n","export const BASE_URL = 'https://hacker-news.firebaseio.com/v0';\n\nexport const ITEM = `${BASE_URL}/item/`;\nexport const TOP_STORIES = `${BASE_URL}/topstories.json/`;\n\nexport const USER_PROFILE = `https://news.ycombinator.com/user?id=`;\n","/**\n * Fetches content from the given endpoint and return it.\n *\n * @param {String} url Url of Api endpoint.\n * @returns {Object} Returns the response of fetch operation.\n */\nexport default async function fetchContent(url) {\n  const result = await fetch(url)\n    .then(response => response.json())\n    .then(data => data)\n    .catch ( () => {\n      return null; \n    });\n\n  return result;\n}\n","import React from 'react';\n\nimport * as string from '../constants/string';\nimport { TOP_STORIES } from '../constants/url';\nimport fetchContent from '../services/hackernewsApi';\n\nimport '../components/common/loader/loader.scss';\n\n/**\n * Creates a new component with predefined container.\n *\n * @param {Component} Component\n * @returns {Component} New componnet containing with given component inside it.\n */\nfunction withStoriesContainer(Component) {\n\n  /**\n   * New Component that wraps a component with stories Container.\n   *\n   * @class WrappedComponent\n   * @augments {React.Component}\n   */\n  class WrappedComponent extends React.Component {\n\n    /**\n     * Creates an instance of WrappedComponent.\n     *\n     * @memberof WrappedComponent\n     */\n    constructor() {\n      super();\n      this.state = {\n        isLoading: true,\n        items: [],\n        error: false\n      };\n    }\n\n    /**\n     * Fetches the stories and changes the stae items.\n     *\n     * @returns {undefined} If an error occurs undefined is returned.\n     * @memberof WrappedComponent\n     */\n    async getStories() {\n      const result = await fetchContent(TOP_STORIES);\n\n      if (!result) {\n        this.setState({\n          error: true\n        });\n\n        return;\n      }\n      if (!result.error) {\n        this.setState({\n          items: result,\n          isLoading: false\n        });\n      }\n    }\n\n    /**\n     * Calls fucntion to get stories when the component mounts.\n     *\n     * @memberof WrappedComponent\n     */\n    componentDidMount() {\n      this.getStories();\n    }\n\n    /**\n     * Renders the component if there is no error during fetching.\n     *\n     * @returns {JSX} JSX for storiesContainer.\n     * @memberof WrappedComponent\n     */\n    render() {\n      if (this.state.error) {\n        return (\n          <p className=\"firstFetchLoadP\">\n            {string.FETCH_ERROR}\n          </p>\n        );\n      }\n\n      return (\n        <div>\n          {this.state.isLoading ? <div className=\"loader center\">Loading...</div> : <Component items={this.state.items} />}\n        </div>\n      );\n    }\n  }\n\n  return WrappedComponent;\n}\n\nexport default withStoriesContainer;\n","/**\n * Gets differnce between current time from given unix timestamp.\n *\n * @param {Date} date\n * @returns\n */\nexport default function mapTimeOfUpload(date) {\n\n  const seconds = Math.floor(((new Date().getTime() / 1000) - date));\n\n  let interval = Math.floor(seconds / 31536000);\n\n  if (interval > 1) {\n    return interval + 'y';\n  }\n\n  interval = Math.floor(seconds / 2592000);\n  if (interval > 1) {\n    return interval + 'm';\n  }\n\n  interval = Math.floor(seconds / 86400);\n  if (interval > 1) {\n    return interval + 'd';\n  }\n  interval = Math.floor(seconds / 3600);\n  if (interval > 1) {\n    return interval + 'h';\n  }\n\n  interval = Math.floor(seconds / 60);\n  if (interval > 1) {\n    return interval + 'm';\n  }\n\n  return Math.floor(seconds) + 's';\n}\n","import React from 'react';\n\nimport PropTypes from 'prop-types';\n\nimport { USER_PROFILE } from '../../../constants/url';\nimport mapTimeOfUpload from '../../../utils/mapTimeOfUpload';\n\nimport './commentCard.scss';\nimport '../../common/loader/loader.scss';\n\n/**\n * A card component for single comment.\n *\n * @param {Object} props\n * @returns {JSX} Returns a commentCard jsx with given comment text.\n */\nfunction CommentCard(props) {\n\n  const { by, time, text, isLoading } = props;\n\n  \n  if (isLoading) {\n    return (\n      <div className=\"CommentCard__sub-content\">\n        <div className=\"loader\">Loading...</div>\n      </div>\n    );\n  }\n\n  if (!by) {\n    return null;\n  }\n\n  return (\n    <div className=\"CommentCard__sub-content\">\n      <div className=\"CommentCard__header\">\n        <a className=\"CommentCard__username\" href={`${USER_PROFILE + by}`}><span dangerouslySetInnerHTML={{ __html: by }} ></span></a>\n        <span>&middot;</span>\n        <span className=\"CommentCard__time\">{mapTimeOfUpload(time)}</span>\n      </div>\n      <p className=\"CommentCard__textContent\" dangerouslySetInnerHTML={{ __html: text }}></p>\n    </div>\n  );\n}\n\nCommentCard.propTypes = {\n  by: PropTypes.string,\n  time: PropTypes.number,\n  text: PropTypes.string,\n  isLoading: PropTypes.bool,\n};\n\nexport default CommentCard;\n","import CommentCard from './CommetCard';\n\nexport default CommentCard;\n","import Comment from './Comment';\n\nexport default Comment;\n","import React from 'react';\n\nimport PropTypes from 'prop-types';\n\nimport CommentCard from './commentCard';\nimport { ITEM } from '../../constants/url';\nimport * as string from '../../constants/string';\n\nimport './comment.scss';\nimport '../common/loader/loader.scss';\n\n/**\n * Class Component for displaying comments of a given story.\n *\n * @class Comment\n * @augments {React.Component}\n */\nclass Comment extends React.Component {\n\n  /**\n   *Creates an instance of Comment.\n   *\n   * @param {Object} props\n   * @memberof Comment\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoading: true,\n      content: {},\n      error: false\n    };\n\n    this.commentId = this.props.commentId;\n  }\n\n  /**\n   * Fetches the comment from the commentId and sets the content state.\n   *\n   * @returns {undefined} Returns undefined if error occurs.\n   * @memberof Comment\n   */\n  async getComments() {\n\n    const commentUrl = `${ITEM + this.commentId}.json`;\n\n    // Fetch is used here instead of calling hackernewsApi.js, so that we can abort the call easily when the component unmounts\n    const result = await fetch(commentUrl, { signal: this.controller.signal })\n      .then(response => response.json())\n      .then(data => data)\n      .catch( () => {\n        return null;\n      });\n\n    if (this.controller.signal.aborted) {\n      return;\n    }\n\n    if (!result) {\n      this.setState({\n        error: true\n      });\n\n      return;\n    }\n\n    this.setState({\n      content: result,\n      isLoading: false\n    });\n  }\n\n  /**\n   * Creates an abort controller for API fetch and calls function to get comments.\n   *\n   * @memberof Comment\n   */\n  componentDidMount() {\n    // Abort Controller is an experimental feature and doesnt work on IE.\n    // Use Axios for better handling. I am using this to be familiar with the Api.\n    this.controller = new AbortController();\n    this.getComments();\n  }\n\n  /**\n   * Aborts the fetch call if it is still fetching when the component unmounts.\n   *\n   * @memberof Comment\n   */\n  componentWillUnmount() {\n    if (this.controller) {\n      this.controller.abort();\n    }\n  }\n\n  /**\n   * Renders the comment component.\n   *\n   * @returns {JSX} Returns JSX for comment section if there is no fetch error or not loading.\n   * @memberof Comment\n   */\n  render() {\n\n    if (this.state.error) {\n      return (\n        <div className='Comment'>\n          {string.COMMENT_ERROR}\n        </div>\n      );\n    }\n\n    const { by, time, text, kids = [] } = this.state.content || {};\n\n    return (\n      <>\n        {this.state.isLoading ?\n          <div className='Comment'>\n            <CommentCard isLoading={true} />\n          </div>\n          :\n          <div className='Comment'>\n            <CommentCard isLoading={false} by={by} time={time} text={text} />\n            {(kids).map(comment => (\n              <Comment key={comment} commentId={comment} type=\"child\" />\n            ))\n            }\n          </div>\n        }\n      </>\n    );\n  }\n}\n\nComment.propTypes = {\n  commentId: PropTypes.number,\n};\n\nexport default Comment;\n","import React from 'react';\n\nimport PropTypes from 'prop-types';\n\nimport './button.scss';\n\n/**\n * Creates a button with the given className and onClick event.\n *\n * @param {Object} props\n * @returns {JSX} A button jsx element.\n */\nfunction Button (props) {\n\n  const { className, onClick } = props;\n\n  return(\n    <button className={`button ${className}`} onClick={onClick}>{props.children}</button>\n  );\n}\n\nButton.propTypes = {\n  className: PropTypes.string,\n  onClick: PropTypes.func,\n  children: PropTypes.any,\n};\n\nexport default Button;\n\n","import Button from './Button';\n\nexport default Button;\n","import React from 'react';\n\nimport PropTypes from 'prop-types';\n\nimport Button from '../components/common/button';\n\nimport '../style/components/modal/Modal.scss';\n\n/**\n * Displays the given component inside Modal.\n *\n * @param {Component} Component\n * @returns {Component} New Component that is wrapped inside modal.\n */\nfunction withModal(Component) {\n\n  /**\n   * New class component that is wrapping given component.\n   *\n   * @class WrappedComponent\n   * @augments {React.Component}\n   */\n  class WrappedComponent extends React.Component {\n\n    closeModal = () => {\n      this.props.history.goBack();\n    }\n    \n    /**\n     * Renders the component with Modal.\n     *\n     * @returns {JSX} New component wrapped with Modal Class.\n     */\n    render() {\n      return (\n        <>\n          <div className=\"Modal\">\n            <Button className=\"Modal__closeButton\" onClick={this.closeModal}>&times;</Button>\n            <Component {...this.props} />\n          </div>\n          <div className=\"Modal-background\" onClick={this.closeModal}></div>\n        </>\n      );\n    }\n\n  }\n\n  WrappedComponent.propTypes = {\n    history: PropTypes.object,\n  };\n\n  return WrappedComponent;\n\n}\n\n\nexport default withModal;\n","import FullStoryView from './FullStoryView';\n\nexport default FullStoryView;\n","import React from 'react';\n\nimport PropTypes from 'prop-types';\n\nimport Comment from '../../comment';\nimport withModal from '../../../hoc/withModal';\nimport * as string from '../../../constants/string';\nimport { ITEM, USER_PROFILE } from '../../../constants/url';\nimport mapTimeOfUpload from '../../../utils/mapTimeOfUpload';\n\nimport './fullStoryView.scss';\nimport '../../common/loader/loader.scss';\n\n/**\n * Class for displaying the story in detail in modal when user clicks the story list.\n *\n * @class FullStoryView\n * @augments {React.Component}\n */\nclass FullStoryView extends React.Component {\n\n  /**\n   * Creates an instance of FullStoryView.\n   *\n   * @param {Object} props\n   * @memberof FullStoryView\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoading: true,\n      kids: [],\n      title: '',\n      result: {},\n      error: false\n    };\n    this.storyId = this.props.match.params.id;\n  }\n\n  /**\n   * Fetches the story comments and sets the result state.\n   *\n   * @returns {undefined} Undefined is returned if error occurs, else changes state.\n   * @memberof FullStoryView\n   */\n  async getComments() {\n\n    const storyUrl = `${ITEM + this.storyId}.json`;\n\n    // Fetch is used here instead of calling hackernewsApi.js, so that we can abort the call easily when the component unmounts.\n    const result = await fetch(storyUrl, { signal: this.controller.signal })\n      .then(response => response.json())\n      .then(data => data)\n      .catch( () => {\n        return null;\n      });\n\n    if (this.controller.signal.aborted) {\n      return;\n    }\n\n    if (!result) {\n      this.setState({\n        error: true\n      });\n\n      return;\n    }\n\n    this.setState({\n      kids: result.kids,\n      title: result.title,\n      result: result,\n      isLoading: false\n    });\n  }\n\n  /**\n   * Creates and abort controller and calls getComments when component is mounted. \n   *\n   * @memberof FullStoryView\n   */\n  componentDidMount() {\n    // Abort Controller is an experimental feature and doesnt work on IE.\n    // Use Axios for better handling. I am using this to be familiar with the Api.\n    this.controller = new AbortController();\n    this.getComments();\n  }\n\n  /**\n   * Aborts the fetch call when the component unmounts, if it is still fetching.\n   *\n   * @memberof FullStoryView\n   */\n  componentWillUnmount() {\n    if (this.controller) {\n      this.controller.abort();\n    }\n  }\n\n  /**\n   * Renders the Story if no error occurs during fetching.\n   *\n   * @returns {JSX} \n   * @memberof FullStoryView\n   */\n  render() {\n\n    if (this.state.error) {\n      return (\n        <div className=\"FullStoryView\">\n          {string.FETCH_ERROR}\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"FullStoryView\">\n        {this.state.isLoading ? <div className=\"loader center\">Loading...</div> :\n          <>\n            <div className=\"FullStoryView__header\">\n\n              <h2><a href={this.state.result.url || '#'}>{this.state.title}</a></h2>\n\n              <div className=\"FullStoryView__details\">\n                <span className=\"FullStoryView__username\" ><span className=\"gray\">By: </span><a href={USER_PROFILE + this.state.result.by}>{this.state.result.by}</a></span>\n                <span>&middot;</span>\n                <span><span className=\"gray\">Score: </span>{this.state.result.score} </span>\n                <span>&middot;</span>\n                <span>{mapTimeOfUpload(this.state.result.time)} ago</span>\n              </div>\n\n            </div>\n            <div className=\"FullStoryView__comment\">\n              <h3 className=\"FullStoryView__comment-header\">Comments</h3>\n              {(this.state.kids || []).map((commentId) => (<Comment key={commentId} commentId={commentId} />))}\n            </div>\n          </>\n        }\n      </div>\n    );\n  }\n}\n\nFullStoryView.propTypes = {\n  match: PropTypes.object,\n};\n\nexport default withModal(FullStoryView);\n","import StoryListItem from './StoryListItem';\n\nexport default StoryListItem;\n","import React from 'react';\n\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\n\nimport * as string from '../../../constants/string';\nimport { ITEM, USER_PROFILE } from '../../../constants/url';\nimport mapTimeOfUpload from '../../../utils/mapTimeOfUpload';\n\nimport './storyListItem.scss';\nimport '../../common/loader/loader.scss';\n\n/**\n * Template for defining list of stories.\n *\n * @class StoryListItem\n * @augments {React.Component}\n */\nclass StoryListItem extends React.Component {\n\n  /**\n   *Creates an instance of StoryListItem.\n   *\n   * @param {Object} props\n   * @memberof StoryListItem\n   */\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isLoading: true,\n      content: {},\n      error: false,\n    };\n  }\n\n  /**\n   * Returns the fetched content details from a given storyId.\n   *\n   * @returns {undefined}\n   * @memberof StoryListItem\n   */\n  async getStories() {\n\n    const storyUrl = `${ITEM + this.props.itemId}.json`;\n\n    // Fetch is used here instead of calling hackernewsApi.js, so that we can abort the call easily \n    // when the component unmounts.\n\n    const result = await fetch(storyUrl, { signal: this.controller.signal })\n      .then(response => response.json())\n      .then(data => data)\n      .catch( () => {\n        return null;\n      });\n\n    // When component is unmounted, check abort signal\n    if (this.controller.signal.aborted) {\n      return;\n    }\n\n    if (!result) {\n      this.setState({\n        error: true\n      });\n\n      return;\n    }\n\n    this.setState({\n      content: result,\n      isLoading: false,\n      error: false\n    });\n\n    this.props.updateCacheData(result);\n  }\n\n  /**\n   * Fetches story when component is mounted.\n   *\n   * @memberof StoryListItem\n   */\n  componentDidMount() {\n    if (this.props.cachedData === null) {\n      // Abort Controller is an experimental feature and doesnt work on IE.\n      // Use Axios for better handling. I am using this to be familiar with the Api.\n      this.controller = new AbortController();\n      this.getStories();\n    } else {\n      this.setState({\n        content: this.props.cachedData,\n        isLoading: false\n      });\n    }\n  }\n\n  /**\n   * Aborts the fetch request when component unmounts.\n   *\n   * @memberof StoryListItem\n   */\n  componentWillUnmount() {\n    if(this.controller) {\n      this.controller.abort();\n    }\n  }\n\n  /**\n   * Returns the list item JSX if no error occurs during fetching.\n   *\n   * @returns {JSX} JSX for single list item.\n   * @memberof StoryListItem\n   */\n  render() {\n\n    if (this.state.error) {\n      return (\n        <div className=\"StoryLisItem\">\n          {string.STORIES_ERROR}\n        </div>\n      );\n    }\n\n    const { title, by } = this.state.content || {};\n\n    return (\n      <div className=\"StoryLisItem\">\n        {\n          this.state.isLoading ?\n            <div className=\"loader\">Loading...</div>\n            : (\n              <>\n                <p className=\"StoryLisItem__title\">\n                  <Link to={{\n                    pathname: `/story/${this.state.content.id}`\n                  }}>\n                    {title}\n                  </Link></p>\n                <p className=\"StoryLisItem__details\">\n                  <span className=\"StoryLisItem__author\">By: <a href={USER_PROFILE + by}>{by}</a>\n                  </span>\n                  <span className=\"StoryLisItem__time\">\n                    {mapTimeOfUpload(this.state.content.time)} ago\n                  </span>\n                </p>\n              </>\n            )\n        }\n      </div>\n    );\n  }\n}\n\nStoryListItem.propTypes = {\n  itemId: PropTypes.number,\n  cachedData: PropTypes.object,\n  updateCacheData: PropTypes.func,\n};\n\nexport default StoryListItem;\n","import React from 'react';\n\nimport PropTypes from 'prop-types';\n\nimport StoryListItem from '../storyListItem';\nimport List from 'react-virtualized-listview';\n\nimport './storiesContainer.scss';\n\nconst listStyle = {\n  item: {\n    padding: 10,\n    boxSizing: 'border-box',\n  }\n};\n\n/**\n * Wrapper for holding all the list items displaying stories.\n *\n * @param {Object} props\n * @returns\n */\nfunction StoriesContainer(props) {\n\n  const data = [...props.items];\n\n  const cachedData = {};\n\n  /**\n   * Store the given fetched value as an caching mechanism.\n   *\n   * @param {Object} item Fetched Item from an api.\n   */\n  function updateCacheData(item) {\n    const { id } = item;\n\n    cachedData[id] = item;\n  }\n\n  return (\n    <div className=\"StoriesContainer\">\n      <List\n        source={data}\n        rowHeight={100}\n        renderItem={({ index, style }) => (\n          <div key={index} style={{ ...listStyle.item, ...style }}>\n            <StoryListItem key={index} itemId={data[index]} updateCacheData={updateCacheData} cachedData={cachedData.hasOwnProperty(data[index]) ? cachedData[data[index]] : null} />\n          </div>\n        )}\n      />\n    </div>\n  );\n}\n\nStoriesContainer.propTypes = {\n  items: PropTypes.array,\n};\n\nexport default StoriesContainer;\n","import StoriesContainer from './StoriesContainer';\n\nexport default StoriesContainer;\n","import React from 'react';\n\nimport { HashRouter as Router, Route } from 'react-router-dom';\n\nimport Header from './components/header';\nimport * as routeUrls from './constants/routeUrl';\nimport withStoriesContainer from './hoc/withStoriesContainer';\nimport FullStoryView from './components/Stories/fullStoryView';\nimport StoriesContainer from './components/Stories/storiesContainer';\n\nimport './style/base.scss';\nimport './style/reset.scss';\nimport './style/style.scss';\n\nconst EnhancedStoriesContainer = withStoriesContainer(StoriesContainer);\n\n/**\n * Main App component. Contains Route paths and header components.\n *\n * @returns {JSX} JSX for main app wrapper.\n */\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <Header />\n        <div className=\"Container\">\n          <Route path={routeUrls.BASE} component={EnhancedStoriesContainer} />\n          <Route path={routeUrls.STORY} component={FullStoryView} />\n        </div>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","export const BASE = '/';\nexport const STORY = '/story/:id';\n","import React from 'react';\n\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}